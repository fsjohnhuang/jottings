##一、参考<br/>
JAVA操作properties文件[http://www.cnblogs.com/panjun-Donet/archive/2009/07/17/1525597.html]<br/>

##二、properties文件<br/>
  配置文件的一种，后缀为“.properties”，格式为文本文件，内容为“键=值”的格式。<br/>
  #号用于注释，注意中文注释会进行unicode编码。<br/>

##三、示例<br/>
````
# ip and port of server socket
ip=127.0.0.1
port=9999
````

##四、操作properties文件
1. 读
````
Properties props = new Properties(); // java.util.Properties对象继承自Hashtable，专门用于操作properties文件
InputStream in = getClass().getResouceAsStream("properties文件相对于当前类加载路径的文件目录"); // 读取properties文件
props.load(in); // load(InputStream in)方法将从输入流获取属性来初始化java.util.Properties对象

// 读取特定属性
String k = "ip";
String ip = props.getProperty(k);

// 遍历所有属性，方法一
Set keys = props.keySet();
for (Iterator it = keys.iterator(); it.hasNext();){
	String k = it.next();
	System.out.println(k + ": " + props.getProperty(k));
}

// 遍历所有属性，方法二
Enumeration en = props.propertyNames();
while(en.hasMoreElements()){
	String k = en.nextElement();
	System.out.println(k + ": " + props.getProperty(k));	
}
````
通过上述方式读，每次都加载新文档。<br/>
2. 写
````
Properties props = new Properties();
InputStream in = getClass().getResouceAsStream("properties文件相对于当前类加载路径的文件目录");
props.load(in);

OutputStream output = new FileOutputStream("properties文件路径");
props.setProperty("ip", "10.248.112.123"); // 修改或新增属性键值对
props.store(output, "modify ip value"); // store(OutputStream output, String comment)将修改结果写入输出流
output.close();
````

## 通过ResourceBundle读取Properties文件
通过ResourceBundle只扥那个读取Properties文件，而不能执行修改操作。<br/>
目录结构<br/>
bin<br/>
&emsp;--main<br/>
&emsp;&emsp;--Debug.class<br/>
&emsp;--config.properties<br/>
<br/>
config.properties文件内容<br/>
````
name=fsjohnhuang
````
````
// ResourceBundle rb = ResourceBundle.getBundle("配置文件相对工程根目录的相对路径（不含扩展名）");
ResourceBundle rb = ResourceBundle.getBundle("config");
try{
	String name = rb.getString("name");
}
catch(MissingResourceException ex){}
````
注意：`ResourceBundle`会缓存配置文件信息，后续读取时均是读取缓存中的内容，若在此期间修改了配置内容是无法实时同步的。<br/>
ResourceBundle有两个子类ListResourceBundle和PropertyResourceBundle，在读取properties文件时实际上是使用PropertyResourceBundle来处理。<br/>
ResourceBundle主要用于解决国际化和本地化问题。<br/>
通过资源命名定义各语言和方言的信息，然乎程序在运行时获取当前本地化信息，并根据本地化信息加载相应的资源完成本地化。<br/>
资源命名规范：<br/>
````
// 仅含家族名
MyResource

// 含家族名和语言
MyResource_en

// 含家族名、语言和国家
MyResource_en_US
````
java代码<br/>
````
// ResourceBundle首先会根据语言和国家的本地化信息去查找资源（假设现在要查找MyResource_zh_CN），当找不到时就会找MyResource_zh，再找不到就用MyResource。
ResourceBundle rb = ResourceBundle.getBundle("MyResource", Locale.getDefault());
````
